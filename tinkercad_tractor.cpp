{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jrHRw94mBl7A"
      },
      "outputs": [],
      "source": [
        "// C++ code\n",
        "//\n",
        "#include <Servo.h>\n",
        "\n",
        "int DISTANCIA = 0;\n",
        "\n",
        "int ESQUERDA = 0;\n",
        "\n",
        "int TEMPO = 0;\n",
        "\n",
        "int DIREITA = 0;\n",
        "\n",
        "int distanciaesquerda = 0;\n",
        "\n",
        "int distanciadireita = 0;\n",
        "\n",
        "int i = 0;\n",
        "\n",
        "int val = 0;    //Variable para almacenar el valor leido\n",
        "int TMP = A2;   //TMP conectado al pin analogico\n",
        "int moisture = 0;\n",
        "int HUM = A1;\n",
        "\n",
        "String ssid     = \"Simulator Wifi\";  // SSID to connect to\n",
        "String password = \"\"; // Our virtual wifi has no password\n",
        "String host     = \"https://apex.oracle.com\"; // Open the Host connection\n",
        "const int httpPort   = 80;\n",
        "String sendTemp = \"/pls/apex/a01687530/api/temperatura/send\"\n",
        "String sendUltra = \"/pls/apex/a01687530/api/humedad/send\"\n",
        "String sendhum =  \"/pls/apex/a01687530/api/ultrasonico/send\"\n",
        "String res = \"\"; //HTTP GET Response\n",
        "\n",
        "\n",
        "long readUltrasonicDistance(int triggerPin, int echoPin)\n",
        "{\n",
        "  pinMode(triggerPin, OUTPUT);  // Clear the trigger\n",
        "  digitalWrite(triggerPin, LOW);\n",
        "  delayMicroseconds(2);\n",
        "  // Sets the trigger pin to HIGH state for 10 microseconds\n",
        "  digitalWrite(triggerPin, HIGH);\n",
        "  delayMicroseconds(10);\n",
        "  digitalWrite(triggerPin, LOW);\n",
        "  pinMode(echoPin, INPUT);\n",
        "  // Reads the echo pin, and returns the sound wave travel time in microseconds\n",
        "  return pulseIn(echoPin, HIGH);\n",
        "}\n",
        "//Metodo para leer la temperatura\n",
        "float temp() {\n",
        "  float temp = 0; //Variable para almacenar la temperatura\n",
        "  val = analogRead(TMP); // Lee el pin analogico de entrada\n",
        "  temp = (val * (5.0/1024)-0.5)/0.01; // determina la temperatura\n",
        "  delay(200);\n",
        "  return temp;\n",
        "}\n",
        "\n",
        "//Metodo para leer la humedad\n",
        "int humedad() {\n",
        "  // Apply power to the soil moisture sensor\n",
        "  digitalWrite(A0, HIGH);\n",
        "  delay(10); // Wait for 10 millisecond(s)\n",
        "  moisture = analogRead(HUM);\n",
        "  // Turn off the sensor to reduce metal corrosion\n",
        "  // over time\n",
        "  digitalWrite(A0, LOW);\n",
        "  return moisture;\n",
        "}\n",
        "\n",
        "void\n",
        "\n",
        "Servo servo_12;\n",
        "\n",
        "void setup()\n",
        "{\n",
        "  Serial.begin(9600);\n",
        "  pinMode(6, OUTPUT);\n",
        "  pinMode(8, OUTPUT);\n",
        "  pinMode(7, OUTPUT);\n",
        "  pinMode(9, OUTPUT);\n",
        "  servo_12.attach(12, 500, 2500);\n",
        "  pinMode(10, OUTPUT);\n",
        "  pinMode(3, OUTPUT);\n",
        "  pinMode(TMP, INPUT); //Establece el pin como salida\n",
        "  servo_12.write(90);\n",
        "  digitalWrite(3, HIGH);\n",
        "  pinMode(A0, OUTPUT);\n",
        "  pinMode(A1, INPUT);\n",
        "  delay(1000); // Wait for 1000 millisecond(s)\n",
        "}\n",
        "\n",
        "void loop()\n",
        "{\n",
        "  Serial.println (\"la humedad es de: \" + String(humedad()));\n",
        "  Serial.println (\"la temperatura es de :\" + String(temp()));\n",
        "  delay(1000); // Wait for 1000 millisecond(s)\n",
        "  Serial.println(0.01723 * readUltrasonicDistance(10, 11));\n",
        "  DISTANCIA = 0.01723 * readUltrasonicDistance(10, 11);\n",
        "  if (DISTANCIA > 50) {\n",
        "    Serial.println(\"CAMINO LIBRE\");\n",
        "    digitalWrite(6, HIGH);\n",
        "    digitalWrite(8, HIGH);\n",
        "  }\n",
        "  if (DISTANCIA < 50) {\n",
        "    Serial.println(\"OBSTACULO\");\n",
        "    digitalWrite(6, LOW);\n",
        "    digitalWrite(8, LOW);\n",
        "    delay(1000); // Wait for 1000 millisecond(s)\n",
        "    // MOTOR REVERSO\n",
        "    digitalWrite(7, HIGH);\n",
        "    digitalWrite(9, HIGH);\n",
        "    delay(1000); // Wait for 1000 millisecond(s)\n",
        "    digitalWrite(7, LOW);\n",
        "    digitalWrite(9, LOW);\n",
        "    delay(1000); // Wait for 1000 millisecond(s)\n",
        "    // OLHANDO A ESQUERDA\n",
        "    Serial.println(\"DOBLAR A LA IZQUIERDA\");\n",
        "    servo_12.write(0);\n",
        "    delay(1000); // Wait for 1000 millisecond(s)\n",
        "    distanciaesquerda = 0.01723 * readUltrasonicDistance(10, 11);\n",
        "    Serial.println(distanciaesquerda);\n",
        "    delay(1000); // Wait for 1000 millisecond(s)\n",
        "    // OLHANDO A DIREITA\n",
        "    Serial.println(\"DOBLAR A LA DERECHA\");\n",
        "    servo_12.write(180);\n",
        "    delay(1000); // Wait for 1000 millisecond(s)\n",
        "    distanciadireita = 0.01723 * readUltrasonicDistance(10, 11);\n",
        "    Serial.println(distanciadireita);\n",
        "    delay(2000); // Wait for 2000 millisecond(s)\n",
        "    if (distanciaesquerda < distanciadireita) {\n",
        "      Serial.println(\"IZQUIERDA MENOR\");\n",
        "      delay(1000); // Wait for 1000 millisecond(s)\n",
        "      // GIRAR A DIREITA\n",
        "      digitalWrite(10, LOW);\n",
        "      servo_12.write(90);\n",
        "      Serial.println(\"GIRAR A LA DERECHA\");\n",
        "      // MOTORES A DIREITA\n",
        "      digitalWrite(9, HIGH);\n",
        "      digitalWrite(6, HIGH);\n",
        "      delay(800); // Wait for 800 millisecond(s)\n",
        "      digitalWrite(9, LOW);\n",
        "      digitalWrite(6, LOW);\n",
        "      delay(1000); // Wait for 1000 millisecond(s)\n",
        "      digitalWrite(10, HIGH);\n",
        "    }\n",
        "    if (distanciaesquerda > distanciadireita) {\n",
        "      Serial.println(\"IZQUIERDA MAYOR\");\n",
        "      delay(1000); // Wait for 1000 millisecond(s)\n",
        "      // GIRAR A ESQUERDA\n",
        "      digitalWrite(10, LOW);\n",
        "      servo_12.write(90);\n",
        "      Serial.println(\"GIRAR A LA IZQUIERDA\");\n",
        "      // MOTORES A ESQUERDA\n",
        "      digitalWrite(8, HIGH);\n",
        "      digitalWrite(7, HIGH);\n",
        "      delay(800); // Wait for 800 millisecond(s)\n",
        "      digitalWrite(8, LOW);\n",
        "      digitalWrite(7, LOW);\n",
        "      delay(1000); // Wait for 1000 millisecond(s)\n",
        "      digitalWrite(10, HIGH);\n",
        "    }\n",
        "  }\n",
        "}"
      ]
    }
  ]
}